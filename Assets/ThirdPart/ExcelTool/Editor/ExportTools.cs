using System.Collections;
using System.Collections.Generic;
using System.IO;
using ExportTool;
using UnityEngine;
using UnityEditor;
using System.Linq;
using System.Text;

public class ExportTools 
{

    private static string ExcelPath = "Assets/Editor/Excel";
    private static string ExprotSharpPath = "Assets/CSharp";
    private static string ExportBytesPath = "Assets/Bytes";
    [UnityEditor.MenuItem("Tools/ExcelsTool")]
    public static void ExportConfig()
    {
        string assetsPath = Application.dataPath;
        string projectPath = Path.GetDirectoryName(assetsPath);
        string excelPathRoot = Path.GetDirectoryName(projectPath) + "/Excels";
        string exportBytesPathRoot = assetsPath + "/ThirdPart/ExcelTool/Resources/ConfigBytes";
        ExprotSharpPath = assetsPath + "/ThirdPart/ExcelTool/AutoGenerated";
        ExcelPath = excelPathRoot;
        ExportBytesPath = exportBytesPathRoot;
        ExportOneConfig();
        // enumerate subdirectories of the ExcelPath
        string[] subDirs = Directory.GetDirectories(excelPathRoot, "*", SearchOption.TopDirectoryOnly);
        foreach (string subDir in subDirs)
        {
            string subDirName = Path.GetFileName(subDir);
            ExcelPath = subDir;
            ExportBytesPath = exportBytesPathRoot + "/" + subDirName;
            // create the subdirectory in the exportBytesPathRoot
            if (!Directory.Exists(ExportBytesPath))
            {
                Directory.CreateDirectory(ExportBytesPath);
            }
            ExportOneConfig();
        }
    }

    public static void ExportOneConfig()
    {
        Dictionary<string, List<string>> mFieldDict = new Dictionary<string, List<string>>();
        
        string[] files = GetExcelFiles();
        List<string> tcfgs = new List<string>();
        foreach (string filename in files)
        {
            ExcelClass texcel = new ExcelClass(filename, ExprotSharpPath);
            Dictionary<string, List<string>> tsnames = texcel.ExportReadClass();
            texcel.Close();
            tcfgs.AddRange(tsnames.Keys.ToList());

            foreach (var v in tsnames)
            {
                mFieldDict[v.Key] = v.Value;
            }
        }
        
        ExportConfigManager tem = new ExportConfigManager(ExprotSharpPath + "/ConfigFactory.cs", tcfgs);
        tem.StartExport();
        
        Debug.LogFormat("Complete  Export C# .filecount = {0}", files.Length);

        ExportFiles();
        //LuaFilesIndexer.ExportLuaFile(mFieldDict);
    }

    public static void ExportFiles()
    {
        string[] files = GetExcelFiles();
        foreach (string filename in files)
        {
            ExcelClass texcel = new ExcelClass(filename, ExportBytesPath);
            texcel.SaveFile();
            texcel.Close();
        }
        Debug.LogFormat("Complete  Export Data .filecount = {0}", files.Length);
        UnityEditor.AssetDatabase.Refresh();
    }

    private static string[] GetExcelFiles()
    {
           
        string[] tfiles = Directory.GetFiles(ExcelPath, "*.*", SearchOption.TopDirectoryOnly);

        List<string> tlist = new List<string>();

        foreach (var cur in tfiles)
        {
            if ((cur.EndsWith(".xls") || cur.EndsWith(".xlsx") || cur.EndsWith(".xlsm")) && !cur.Contains("~$"))
            {
                tlist.Add(cur);
            }
        }

        for (int i = 0; i < tlist.Count; i++)
        {
            Debug.Log("文件名称"+tlist[i]);
        }
            
        return tlist.ToArray();
    }
}
